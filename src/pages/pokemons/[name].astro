---
import type { GetStaticPaths } from "astro";

import PokemonCard from "@/components/pokemons/PokemonCard.astro";
import type { PokemonListResponse } from "@/interfaces/pokemon-list.response";
import MainLayout from "@/layouts/MainLayout.astro";
import Title from "@/components/shared/Title.astro";
import { Icon } from "astro-icon/components";

export const getStaticPaths = (async () => {
  const res = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151");
  const data = (await res.json()) as PokemonListResponse;

  const params = data.results.map((pokemon) => ({
    params: {
      name: pokemon.name.toLowerCase(),
    },
    props: {
      url: pokemon.url,
    },
  }));

  return params;
}) satisfies GetStaticPaths;

const { name } = Astro.params;
const { url } = Astro.props;

const title = `${name.charAt(0).toUpperCase()}${name.slice(1)} - Pokemon`;
const id = url.split("/").at(-2);

const criesSrc = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${id}.ogg`;
const imageSrc = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`;
---

<MainLayout
  title={title}
  description={`InformaciÃ³n sobre el pokemon ${name}`}
  image={imageSrc}
>
  <section class="mt-10 mx-10 flex flex-col justify-center items-center">
    <div class="flex">
      <div class="mb-5">
        <button
          onclick="history.back()"
          class="text-blue-500 hover:underline hover:text-blue-300"
        >
          Volver
        </button>
        <Title>{name}</Title>
      </div>

      <button id="btn-favorite" class="ml-4" data-name={name} data-id={id}>
        <Icon name="heart-outline" size={50} data-outline />
        <Icon class="hidden" name="filled-heart" size={50} data-full />
      </button>
    </div>

    <PokemonCard name={name} url={url} isBig />
    <audio class="mt-5" controls>
      <source src={criesSrc} type="audio/ogg" />
      Your browser does not support the audio element.
    </audio>
  </section>
</MainLayout>

<style>
  a {
    @apply hover:underline text-blue-500;
  }

  #btn-favorite {
    @apply hover:animate-pulse;
  }
</style>

<script>
  import type { FavoritePokemon } from "@/interfaces/favorite-pokemon";

  const handlePageLoad = () => {
    let favoritesPokemons: FavoritePokemon[] = JSON.parse(
      localStorage.getItem("favorites") ?? "[]"
    );

    const btnFavorite =
      document.querySelector<HTMLButtonElement>("#btn-favorite");

    if (!btnFavorite) return;

    const { id = 0, name = "" } = btnFavorite.dataset;

    const heartOutline = document.querySelector<HTMLElement>("[data-outline]")!;
    const heartFull = document.querySelector<HTMLElement>("[data-full]")!;

    // Check if the pokemon is in the favorites
    const setHeartIcon = () => {
			console.log(favoritesPokemons);
      const isFavorite = favoritesPokemons.some((fav) => fav.name === name);

      if (isFavorite) {
        heartOutline.classList.add("hidden");
        heartFull.classList.remove("hidden");
      }
    };

    setHeartIcon();

    const toggleFav = () => {
      const isFavorite = favoritesPokemons.some((fav) => fav.name === name);

      if (isFavorite) {
        // Remove the favorite pokemon
        favoritesPokemons = favoritesPokemons.filter(
          (fav) => fav.name !== name
        );
      } else {
        favoritesPokemons.push({
          id: +id,
          name,
        });
      }

      localStorage.setItem("favorites", JSON.stringify(favoritesPokemons));
    };

    btnFavorite.addEventListener("click", () => {
      heartOutline.classList.toggle("hidden");
      heartFull.classList.toggle("hidden");

      toggleFav();
    });
  };

  document.addEventListener("astro:page-load", handlePageLoad);
</script>
